#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ContextGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using DriverSolutions.DAL;

namespace DriverSolutions.DAL	
{
	[NamingSettings(SourceStrategy = NamingSourceStrategy.Property, ResolveReservedWords = true, UseDelimitedSQL = true, WordBreak = "_")]
	public partial class DSModel : OpenAccessContext, IDSModelUnitOfWork
	{
		private static string connectionStringName = @"DSConnectionString";
			
		private static BackendConfiguration backend = GetBackendConfiguration();
				
		private static MetadataSource metadataSource = AttributesMetadataSource.FromContext(typeof(DSModel));
		
		public DSModel()
			:base(connectionStringName, backend, metadataSource)
		{ }
		
		public DSModel(string connection)
			:base(connection, backend, metadataSource)
		{ }
		
		public DSModel(BackendConfiguration backendConfiguration)
			:base(connectionStringName, backendConfiguration, metadataSource)
		{ }
			
		public DSModel(string connection, MetadataSource metadataSource)
			:base(connection, backend, metadataSource)
		{ }
		
		public DSModel(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource)
			:base(connection, backendConfiguration, metadataSource)
		{ }
			
		public IQueryable<User> Users 
		{
			get
			{
				return this.GetAll<User>();
			}
		}
		
		public IQueryable<SqlQuery> SqlQueries 
		{
			get
			{
				return this.GetAll<SqlQuery>();
			}
		}
		
		public IQueryable<Setting> Settings 
		{
			get
			{
				return this.GetAll<Setting>();
			}
		}
		
		public IQueryable<Report> Reports 
		{
			get
			{
				return this.GetAll<Report>();
			}
		}
		
		public IQueryable<LocationsDriver> LocationsDrivers 
		{
			get
			{
				return this.GetAll<LocationsDriver>();
			}
		}
		
		public IQueryable<Location> Locations 
		{
			get
			{
				return this.GetAll<Location>();
			}
		}
		
		public IQueryable<InvoicesNumber> InvoicesNumbers 
		{
			get
			{
				return this.GetAll<InvoicesNumber>();
			}
		}
		
		public IQueryable<InvoicesDetail> InvoicesDetails 
		{
			get
			{
				return this.GetAll<InvoicesDetail>();
			}
		}
		
		public IQueryable<Invoice> Invoices 
		{
			get
			{
				return this.GetAll<Invoice>();
			}
		}
		
		public IQueryable<Holiday> Holidays 
		{
			get
			{
				return this.GetAll<Holiday>();
			}
		}
		
		public IQueryable<FileObject> FileObjects 
		{
			get
			{
				return this.GetAll<FileObject>();
			}
		}
		
		public IQueryable<DriversConstPermit> DriversConstPermits 
		{
			get
			{
				return this.GetAll<DriversConstPermit>();
			}
		}
		
		public IQueryable<Driver> Drivers 
		{
			get
			{
				return this.GetAll<Driver>();
			}
		}
		
		public IQueryable<Dispatch> Dispatches 
		{
			get
			{
				return this.GetAll<Dispatch>();
			}
		}
		
		public IQueryable<DbVersion> DbVersions 
		{
			get
			{
				return this.GetAll<DbVersion>();
			}
		}
		
		public IQueryable<Contact> Contacts 
		{
			get
			{
				return this.GetAll<Contact>();
			}
		}
		
		public IQueryable<ConstPermit> ConstPermits 
		{
			get
			{
				return this.GetAll<ConstPermit>();
			}
		}
		
		public IQueryable<ConstInvoiceType> ConstInvoiceTypes 
		{
			get
			{
				return this.GetAll<ConstInvoiceType>();
			}
		}
		
		public IQueryable<ConstContactType> ConstContactTypes 
		{
			get
			{
				return this.GetAll<ConstContactType>();
			}
		}
		
		public IQueryable<CompanyInfo> CompanyInfos 
		{
			get
			{
				return this.GetAll<CompanyInfo>();
			}
		}
		
		public IQueryable<CompaniesLicensesPayrate> CompaniesLicensesPayrates 
		{
			get
			{
				return this.GetAll<CompaniesLicensesPayrate>();
			}
		}
		
		public IQueryable<CompaniesInvoicingPayrate> CompaniesInvoicingPayrates 
		{
			get
			{
				return this.GetAll<CompaniesInvoicingPayrate>();
			}
		}
		
		public IQueryable<Company> Companies 
		{
			get
			{
				return this.GetAll<Company>();
			}
		}
		
		public IQueryable<FileBlob> FileBlobs 
		{
			get
			{
				return this.GetAll<FileBlob>();
			}
		}
		
		public IQueryable<DriversMedicalsReminder> DriversMedicalsReminders 
		{
			get
			{
				return this.GetAll<DriversMedicalsReminder>();
			}
		}
		
		public IQueryable<DriversMedical> DriversMedicals 
		{
			get
			{
				return this.GetAll<DriversMedical>();
			}
		}
		
		public IQueryable<ConstReminder> ConstReminders 
		{
			get
			{
				return this.GetAll<ConstReminder>();
			}
		}
		
		public IQueryable<ConstMedicalType> ConstMedicalTypes 
		{
			get
			{
				return this.GetAll<ConstMedicalType>();
			}
		}
		
		public IQueryable<DriversLicensesPermit> DriversLicensesPermits 
		{
			get
			{
				return this.GetAll<DriversLicensesPermit>();
			}
		}
		
		public IQueryable<DriversLicense> DriversLicenses 
		{
			get
			{
				return this.GetAll<DriversLicense>();
			}
		}
		
		public IQueryable<ConstLicense> ConstLicenses 
		{
			get
			{
				return this.GetAll<ConstLicense>();
			}
		}
		
		public IQueryable<DriversLicensesReminder> DriversLicensesReminders 
		{
			get
			{
				return this.GetAll<DriversLicensesReminder>();
			}
		}
		
		public static BackendConfiguration GetBackendConfiguration()
		{
			BackendConfiguration backend = new BackendConfiguration();
			backend.Backend = "MySql";
			backend.ProviderName = "MySql.Data.MySqlClient";
			backend.Logging.LogEventsToTrace = false;
			backend.Logging.MetricStoreSnapshotInterval = 0;
			backend.ConnectionPool.Pool = ConnectionPoolType.ADO;
			backend.Runtime.CommandTimeout = 5;
		
			CustomizeBackendConfiguration(ref backend);
		
			return backend;
		}
		
		/// <summary>
		/// Allows you to customize the BackendConfiguration of DSModel.
		/// </summary>
		/// <param name="config">The BackendConfiguration of DSModel.</param>
		static partial void CustomizeBackendConfiguration(ref BackendConfiguration config);
		
	}
	
	public interface IDSModelUnitOfWork : IUnitOfWork
	{
		IQueryable<User> Users
		{
			get;
		}
		IQueryable<SqlQuery> SqlQueries
		{
			get;
		}
		IQueryable<Setting> Settings
		{
			get;
		}
		IQueryable<Report> Reports
		{
			get;
		}
		IQueryable<LocationsDriver> LocationsDrivers
		{
			get;
		}
		IQueryable<Location> Locations
		{
			get;
		}
		IQueryable<InvoicesNumber> InvoicesNumbers
		{
			get;
		}
		IQueryable<InvoicesDetail> InvoicesDetails
		{
			get;
		}
		IQueryable<Invoice> Invoices
		{
			get;
		}
		IQueryable<Holiday> Holidays
		{
			get;
		}
		IQueryable<FileObject> FileObjects
		{
			get;
		}
		IQueryable<DriversConstPermit> DriversConstPermits
		{
			get;
		}
		IQueryable<Driver> Drivers
		{
			get;
		}
		IQueryable<Dispatch> Dispatches
		{
			get;
		}
		IQueryable<DbVersion> DbVersions
		{
			get;
		}
		IQueryable<Contact> Contacts
		{
			get;
		}
		IQueryable<ConstPermit> ConstPermits
		{
			get;
		}
		IQueryable<ConstInvoiceType> ConstInvoiceTypes
		{
			get;
		}
		IQueryable<ConstContactType> ConstContactTypes
		{
			get;
		}
		IQueryable<CompanyInfo> CompanyInfos
		{
			get;
		}
		IQueryable<CompaniesLicensesPayrate> CompaniesLicensesPayrates
		{
			get;
		}
		IQueryable<CompaniesInvoicingPayrate> CompaniesInvoicingPayrates
		{
			get;
		}
		IQueryable<Company> Companies
		{
			get;
		}
		IQueryable<FileBlob> FileBlobs
		{
			get;
		}
		IQueryable<DriversMedicalsReminder> DriversMedicalsReminders
		{
			get;
		}
		IQueryable<DriversMedical> DriversMedicals
		{
			get;
		}
		IQueryable<ConstReminder> ConstReminders
		{
			get;
		}
		IQueryable<ConstMedicalType> ConstMedicalTypes
		{
			get;
		}
		IQueryable<DriversLicensesPermit> DriversLicensesPermits
		{
			get;
		}
		IQueryable<DriversLicense> DriversLicenses
		{
			get;
		}
		IQueryable<ConstLicense> ConstLicenses
		{
			get;
		}
		IQueryable<DriversLicensesReminder> DriversLicensesReminders
		{
			get;
		}
	}
}
#pragma warning restore 1591
