#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ClassGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using System.ComponentModel;
using DriverSolutions.DAL;

namespace DriverSolutions.DAL	
{
	[Table("locations")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	[KeyGenerator(KeyGenerator.Autoinc)]
	public partial class Location : INotifyPropertyChanged
	{
		private uint _locationID;
		[Column("LocationID", OpenAccessType = OpenAccessType.Int32, IsBackendCalculated = true, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_locationID")]
		public virtual uint LocationID
		{
			get
			{
				return this._locationID;
			}
			set
			{
				if(this._locationID != value)
				{
					this._locationID = value;
					this.OnPropertyChanged("LocationID");
				}
			}
		}
		
		private string _locationName;
		[Column("LocationName", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 100, Scale = 0, SqlType = "nvarchar")]
		[Storage("_locationName")]
		public virtual string LocationName
		{
			get
			{
				return this._locationName;
			}
			set
			{
				if(this._locationName != value)
				{
					this._locationName = value;
					this.OnPropertyChanged("LocationName");
				}
			}
		}
		
		private string _locationCode;
		[Column("LocationCode", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, IsNullable = true, Length = 100, Scale = 0, SqlType = "nvarchar")]
		[Storage("_locationCode")]
		public virtual string LocationCode
		{
			get
			{
				return this._locationCode;
			}
			set
			{
				if(this._locationCode != value)
				{
					this._locationCode = value;
					this.OnPropertyChanged("LocationCode");
				}
			}
		}
		
		private uint _companyID;
		[Column("CompanyID", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_companyID")]
		public virtual uint CompanyID
		{
			get
			{
				return this._companyID;
			}
			set
			{
				if(this._companyID != value)
				{
					this._companyID = value;
					this.OnPropertyChanged("CompanyID");
				}
			}
		}
		
		private string _locationAddress;
		[Column("LocationAddress", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, IsNullable = true, Length = 255, Scale = 0, SqlType = "nvarchar")]
		[Storage("_locationAddress")]
		public virtual string LocationAddress
		{
			get
			{
				return this._locationAddress;
			}
			set
			{
				if(this._locationAddress != value)
				{
					this._locationAddress = value;
					this.OnPropertyChanged("LocationAddress");
				}
			}
		}
		
		private string _locationPhone;
		[Column("LocationPhone", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, IsNullable = true, Length = 255, Scale = 0, SqlType = "nvarchar")]
		[Storage("_locationPhone")]
		public virtual string LocationPhone
		{
			get
			{
				return this._locationPhone;
			}
			set
			{
				if(this._locationPhone != value)
				{
					this._locationPhone = value;
					this.OnPropertyChanged("LocationPhone");
				}
			}
		}
		
		private string _locationFax;
		[Column("LocationFax", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, IsNullable = true, Length = 255, Scale = 0, SqlType = "nvarchar")]
		[Storage("_locationFax")]
		public virtual string LocationFax
		{
			get
			{
				return this._locationFax;
			}
			set
			{
				if(this._locationFax != value)
				{
					this._locationFax = value;
					this.OnPropertyChanged("LocationFax");
				}
			}
		}
		
		private uint? _confirmationContactID;
		[Column("ConfirmationContactID", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_confirmationContactID")]
		public virtual uint? ConfirmationContactID
		{
			get
			{
				return this._confirmationContactID;
			}
			set
			{
				if(this._confirmationContactID != value)
				{
					this._confirmationContactID = value;
					this.OnPropertyChanged("ConfirmationContactID");
				}
			}
		}
		
		private uint? _invoiceContactID;
		[Column("InvoiceContactID", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_invoiceContactID")]
		public virtual uint? InvoiceContactID
		{
			get
			{
				return this._invoiceContactID;
			}
			set
			{
				if(this._invoiceContactID != value)
				{
					this._invoiceContactID = value;
					this.OnPropertyChanged("InvoiceContactID");
				}
			}
		}
		
		private uint? _dispatchContactID;
		[Column("DispatchContactID", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_dispatchContactID")]
		public virtual uint? DispatchContactID
		{
			get
			{
				return this._dispatchContactID;
			}
			set
			{
				if(this._dispatchContactID != value)
				{
					this._dispatchContactID = value;
					this.OnPropertyChanged("DispatchContactID");
				}
			}
		}
		
		private decimal _travelPay;
		[Column("TravelPay", OpenAccessType = OpenAccessType.Decimal, Length = 10, Scale = 2, SqlType = "decimal")]
		[Storage("_travelPay")]
		public virtual decimal TravelPay
		{
			get
			{
				return this._travelPay;
			}
			set
			{
				if(this._travelPay != value)
				{
					this._travelPay = value;
					this.OnPropertyChanged("TravelPay");
				}
			}
		}
		
		private string _travelPayName;
		[Column("TravelPayName", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, IsNullable = true, Length = 255, Scale = 0, SqlType = "nvarchar")]
		[Storage("_travelPayName")]
		public virtual string TravelPayName
		{
			get
			{
				return this._travelPayName;
			}
			set
			{
				if(this._travelPayName != value)
				{
					this._travelPayName = value;
					this.OnPropertyChanged("TravelPayName");
				}
			}
		}
		
		private int _lunchTime;
		[Column("LunchTime", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "integer")]
		[Storage("_lunchTime")]
		public virtual int LunchTime
		{
			get
			{
				return this._lunchTime;
			}
			set
			{
				if(this._lunchTime != value)
				{
					this._lunchTime = value;
					this.OnPropertyChanged("LunchTime");
				}
			}
		}
		
		private bool _isEnabled;
		[Column("IsEnabled", OpenAccessType = OpenAccessType.Bit, Length = 0, Scale = 0, SqlType = "bit")]
		[Storage("_isEnabled")]
		public virtual bool IsEnabled
		{
			get
			{
				return this._isEnabled;
			}
			set
			{
				if(this._isEnabled != value)
				{
					this._isEnabled = value;
					this.OnPropertyChanged("IsEnabled");
				}
			}
		}
		
		private bool _includeConfirmation;
		[Column("IncludeConfirmation", OpenAccessType = OpenAccessType.Bit, Length = 0, Scale = 0, SqlType = "bit")]
		[Storage("_includeConfirmation")]
		public virtual bool IncludeConfirmation
		{
			get
			{
				return this._includeConfirmation;
			}
			set
			{
				if(this._includeConfirmation != value)
				{
					this._includeConfirmation = value;
					this.OnPropertyChanged("IncludeConfirmation");
				}
			}
		}
		
		private Contact _contact;
		[ForeignKeyAssociation(ConstraintName = "FK_locations_contacts_ContactID3", SharedFields = "DispatchContactID", TargetFields = "ContactID")]
		[Storage("_contact")]
		public virtual Contact DispatchContact
		{
			get
			{
				return this._contact;
			}
			set
			{
				if(this._contact != value)
				{
					this._contact = value;
					this.OnPropertyChanged("DispatchContact");
				}
			}
		}
		
		private Contact _contact1;
		[ForeignKeyAssociation(ConstraintName = "FK_locations_contacts_ContactID2", SharedFields = "InvoiceContactID", TargetFields = "ContactID")]
		[Storage("_contact1")]
		public virtual Contact InvoiceContact
		{
			get
			{
				return this._contact1;
			}
			set
			{
				if(this._contact1 != value)
				{
					this._contact1 = value;
					this.OnPropertyChanged("InvoiceContact");
				}
			}
		}
		
		private Contact _contact2;
		[ForeignKeyAssociation(ConstraintName = "FK_locations_contacts_ContactID1", SharedFields = "ConfirmationContactID", TargetFields = "ContactID")]
		[Storage("_contact2")]
		public virtual Contact ConfirmationContact
		{
			get
			{
				return this._contact2;
			}
			set
			{
				if(this._contact2 != value)
				{
					this._contact2 = value;
					this.OnPropertyChanged("ConfirmationContact");
				}
			}
		}
		
		private Company _company;
		[ForeignKeyAssociation(ConstraintName = "FK_locations_companies_CompanyID", SharedFields = "CompanyID", TargetFields = "CompanyID")]
		[Storage("_company")]
		public virtual Company Company
		{
			get
			{
				return this._company;
			}
			set
			{
				if(this._company != value)
				{
					this._company = value;
					this.OnPropertyChanged("Company");
				}
			}
		}
		
		private IList<LocationsDriver> _locationsDrivers = new List<LocationsDriver>();
		[Collection(InverseProperty = "Location")]
		[Storage("_locationsDrivers")]
		public virtual IList<LocationsDriver> LocationsDrivers
		{
			get
			{
				return this._locationsDrivers;
			}
		}
		
		private IList<InvoicesNumber> _invoicesNumbers = new List<InvoicesNumber>();
		[Collection(InverseProperty = "Location")]
		[Storage("_invoicesNumbers")]
		public virtual IList<InvoicesNumber> InvoicesNumbers
		{
			get
			{
				return this._invoicesNumbers;
			}
		}
		
		private IList<Invoice> _invoices = new List<Invoice>();
		[Collection(InverseProperty = "Location")]
		[Storage("_invoices")]
		public virtual IList<Invoice> Invoices
		{
			get
			{
				return this._invoices;
			}
		}
		
		private IList<Dispatch> _dispatches = new List<Dispatch>();
		[Collection(InverseProperty = "Location")]
		[Storage("_dispatches")]
		public virtual IList<Dispatch> Dispatches
		{
			get
			{
				return this._dispatches;
			}
		}
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
	}
}
#pragma warning restore 1591
