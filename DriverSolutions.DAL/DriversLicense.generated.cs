#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ClassGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using System.ComponentModel;
using DriverSolutions.DAL;

namespace DriverSolutions.DAL	
{
	[Table("drivers_licenses")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	[KeyGenerator(KeyGenerator.Autoinc)]
	public partial class DriversLicense : INotifyPropertyChanged
	{
		private uint _driverLicenseID;
		[Column("DriverLicenseID", OpenAccessType = OpenAccessType.Int32, IsBackendCalculated = true, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_driverLicenseID")]
		public virtual uint DriverLicenseID
		{
			get
			{
				return this._driverLicenseID;
			}
			set
			{
				if(this._driverLicenseID != value)
				{
					this._driverLicenseID = value;
					this.OnPropertyChanged("DriverLicenseID");
				}
			}
		}
		
		private DateTime _issueDate;
		[Column("IssueDate", OpenAccessType = OpenAccessType.Date, Length = 0, Scale = 0, SqlType = "date")]
		[Storage("_issueDate")]
		public virtual DateTime IssueDate
		{
			get
			{
				return this._issueDate;
			}
			set
			{
				if(this._issueDate != value)
				{
					this._issueDate = value;
					this.OnPropertyChanged("IssueDate");
				}
			}
		}
		
		private DateTime _expirationDate;
		[Column("ExpirationDate", OpenAccessType = OpenAccessType.Date, Length = 0, Scale = 0, SqlType = "date")]
		[Storage("_expirationDate")]
		public virtual DateTime ExpirationDate
		{
			get
			{
				return this._expirationDate;
			}
			set
			{
				if(this._expirationDate != value)
				{
					this._expirationDate = value;
					this.OnPropertyChanged("ExpirationDate");
				}
			}
		}
		
		private DateTime? _mVRReviewDate;
		[Column("MVRReviewDate", OpenAccessType = OpenAccessType.Date, IsNullable = true, Length = 0, Scale = 0, SqlType = "date")]
		[Storage("_mVRReviewDate")]
		public virtual DateTime? MVRReviewDate
		{
			get
			{
				return this._mVRReviewDate;
			}
			set
			{
				if(this._mVRReviewDate != value)
				{
					this._mVRReviewDate = value;
					this.OnPropertyChanged("MVRReviewDate");
				}
			}
		}
		
		private uint _licenseID;
		[Column("LicenseID", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_licenseID")]
		public virtual uint LicenseID
		{
			get
			{
				return this._licenseID;
			}
			set
			{
				if(this._licenseID != value)
				{
					this._licenseID = value;
					this.OnPropertyChanged("LicenseID");
				}
			}
		}
		
		private uint _driverID;
		[Column("DriverID", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_driverID")]
		public virtual uint DriverID
		{
			get
			{
				return this._driverID;
			}
			set
			{
				if(this._driverID != value)
				{
					this._driverID = value;
					this.OnPropertyChanged("DriverID");
				}
			}
		}
		
		private ConstLicense _constLicense;
		[ForeignKeyAssociation(ConstraintName = "FK_drivers_licenses_const_licenses_LicenseID", SharedFields = "LicenseID", TargetFields = "LicenseID")]
		[Storage("_constLicense")]
		public virtual ConstLicense ConstLicense
		{
			get
			{
				return this._constLicense;
			}
			set
			{
				if(this._constLicense != value)
				{
					this._constLicense = value;
					this.OnPropertyChanged("ConstLicense");
				}
			}
		}
		
		private Driver _driver;
		[ForeignKeyAssociation(ConstraintName = "FK_drivers_licenses_drivers_DriverID", SharedFields = "DriverID", TargetFields = "DriverID")]
		[Storage("_driver")]
		public virtual Driver Driver
		{
			get
			{
				return this._driver;
			}
			set
			{
				if(this._driver != value)
				{
					this._driver = value;
					this.OnPropertyChanged("Driver");
				}
			}
		}
		
		private IList<DriversLicensesPermit> _driversLicensesPermits = new List<DriversLicensesPermit>();
		[Collection(InverseProperty = "DriversLicense")]
		[Storage("_driversLicensesPermits")]
		public virtual IList<DriversLicensesPermit> DriversLicensesPermits
		{
			get
			{
				return this._driversLicensesPermits;
			}
		}
		
		private IList<DriversLicensesReminder> _driversLicensesReminders = new List<DriversLicensesReminder>();
		[Collection(InverseProperty = "DriversLicense")]
		[Storage("_driversLicensesReminders")]
		public virtual IList<DriversLicensesReminder> DriversLicensesReminders
		{
			get
			{
				return this._driversLicensesReminders;
			}
		}
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
	}
}
#pragma warning restore 1591
