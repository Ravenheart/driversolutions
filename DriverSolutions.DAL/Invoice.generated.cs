#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ClassGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using System.ComponentModel;
using DriverSolutions.DAL;

namespace DriverSolutions.DAL	
{
	[Table("invoices")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	[KeyGenerator(KeyGenerator.Autoinc)]
	public partial class Invoice : INotifyPropertyChanged
	{
		private uint _invoiceID;
		[Column("InvoiceID", OpenAccessType = OpenAccessType.Int32, IsBackendCalculated = true, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_invoiceID")]
		public virtual uint InvoiceID
		{
			get
			{
				return this._invoiceID;
			}
			set
			{
				if(this._invoiceID != value)
				{
					this._invoiceID = value;
					this.OnPropertyChanged("InvoiceID");
				}
			}
		}
		
		private uint _companyID;
		[Column("CompanyID", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_companyID")]
		public virtual uint CompanyID
		{
			get
			{
				return this._companyID;
			}
			set
			{
				if(this._companyID != value)
				{
					this._companyID = value;
					this.OnPropertyChanged("CompanyID");
				}
			}
		}
		
		private uint _locationID;
		[Column("LocationID", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_locationID")]
		public virtual uint LocationID
		{
			get
			{
				return this._locationID;
			}
			set
			{
				if(this._locationID != value)
				{
					this._locationID = value;
					this.OnPropertyChanged("LocationID");
				}
			}
		}
		
		private uint _invoiceTypeID;
		[Column("InvoiceTypeID", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_invoiceTypeID")]
		public virtual uint InvoiceTypeID
		{
			get
			{
				return this._invoiceTypeID;
			}
			set
			{
				if(this._invoiceTypeID != value)
				{
					this._invoiceTypeID = value;
					this.OnPropertyChanged("InvoiceTypeID");
				}
			}
		}
		
		private string _invoiceNumber;
		[Column("InvoiceNumber", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 255, Scale = 0, SqlType = "nvarchar")]
		[Storage("_invoiceNumber")]
		public virtual string InvoiceNumber
		{
			get
			{
				return this._invoiceNumber;
			}
			set
			{
				if(this._invoiceNumber != value)
				{
					this._invoiceNumber = value;
					this.OnPropertyChanged("InvoiceNumber");
				}
			}
		}
		
		private DateTime _invoiceIssueDate;
		[Column("InvoiceIssueDate", OpenAccessType = OpenAccessType.Date, Length = 0, Scale = 0, SqlType = "date")]
		[Storage("_invoiceIssueDate")]
		public virtual DateTime InvoiceIssueDate
		{
			get
			{
				return this._invoiceIssueDate;
			}
			set
			{
				if(this._invoiceIssueDate != value)
				{
					this._invoiceIssueDate = value;
					this.OnPropertyChanged("InvoiceIssueDate");
				}
			}
		}
		
		private DateTime _invoicePeriodFrom;
		[Column("InvoicePeriodFrom", OpenAccessType = OpenAccessType.Date, Length = 0, Scale = 0, SqlType = "date")]
		[Storage("_invoicePeriodFrom")]
		public virtual DateTime InvoicePeriodFrom
		{
			get
			{
				return this._invoicePeriodFrom;
			}
			set
			{
				if(this._invoicePeriodFrom != value)
				{
					this._invoicePeriodFrom = value;
					this.OnPropertyChanged("InvoicePeriodFrom");
				}
			}
		}
		
		private DateTime _invoicePeriodTo;
		[Column("InvoicePeriodTo", OpenAccessType = OpenAccessType.Date, Length = 0, Scale = 0, SqlType = "date")]
		[Storage("_invoicePeriodTo")]
		public virtual DateTime InvoicePeriodTo
		{
			get
			{
				return this._invoicePeriodTo;
			}
			set
			{
				if(this._invoicePeriodTo != value)
				{
					this._invoicePeriodTo = value;
					this.OnPropertyChanged("InvoicePeriodTo");
				}
			}
		}
		
		private string _invoiceNote;
		[Column("InvoiceNote", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "text")]
		[Storage("_invoiceNote")]
		public virtual string InvoiceNote
		{
			get
			{
				return this._invoiceNote;
			}
			set
			{
				if(this._invoiceNote != value)
				{
					this._invoiceNote = value;
					this.OnPropertyChanged("InvoiceNote");
				}
			}
		}
		
		private decimal _lateCharge;
		[Column("LateCharge", OpenAccessType = OpenAccessType.Decimal, Length = 10, Scale = 2, SqlType = "decimal")]
		[Storage("_lateCharge")]
		public virtual decimal LateCharge
		{
			get
			{
				return this._lateCharge;
			}
			set
			{
				if(this._lateCharge != value)
				{
					this._lateCharge = value;
					this.OnPropertyChanged("LateCharge");
				}
			}
		}
		
		private uint _lateChargeDays;
		[Column("LateChargeDays", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_lateChargeDays")]
		public virtual uint LateChargeDays
		{
			get
			{
				return this._lateChargeDays;
			}
			set
			{
				if(this._lateChargeDays != value)
				{
					this._lateChargeDays = value;
					this.OnPropertyChanged("LateChargeDays");
				}
			}
		}
		
		private bool _isConfirmed;
		[Column("IsConfirmed", OpenAccessType = OpenAccessType.Bit, Length = 0, Scale = 0, SqlType = "bit")]
		[Storage("_isConfirmed")]
		public virtual bool IsConfirmed
		{
			get
			{
				return this._isConfirmed;
			}
			set
			{
				if(this._isConfirmed != value)
				{
					this._isConfirmed = value;
					this.OnPropertyChanged("IsConfirmed");
				}
			}
		}
		
		private uint _userID;
		[Column("UserID", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "integer unsigned")]
		[Storage("_userID")]
		public virtual uint UserID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if(this._userID != value)
				{
					this._userID = value;
					this.OnPropertyChanged("UserID");
				}
			}
		}
		
		private DateTime _lastUpdateTime;
		[Column("LastUpdateTime", OpenAccessType = OpenAccessType.DateTime, Length = 0, Scale = 0, SqlType = "timestamp")]
		[Storage("_lastUpdateTime")]
		public virtual DateTime LastUpdateTime
		{
			get
			{
				return this._lastUpdateTime;
			}
			set
			{
				if(this._lastUpdateTime != value)
				{
					this._lastUpdateTime = value;
					this.OnPropertyChanged("LastUpdateTime");
				}
			}
		}
		
		private User _user;
		[ForeignKeyAssociation(ConstraintName = "FK_invoices_users_UserID", SharedFields = "UserID", TargetFields = "UserID")]
		[Storage("_user")]
		public virtual User User
		{
			get
			{
				return this._user;
			}
			set
			{
				if(this._user != value)
				{
					this._user = value;
					this.OnPropertyChanged("User");
				}
			}
		}
		
		private Location _location;
		[ForeignKeyAssociation(ConstraintName = "FK_invoices_locations_LocationID", SharedFields = "LocationID", TargetFields = "LocationID")]
		[Storage("_location")]
		public virtual Location Location
		{
			get
			{
				return this._location;
			}
			set
			{
				if(this._location != value)
				{
					this._location = value;
					this.OnPropertyChanged("Location");
				}
			}
		}
		
		private ConstInvoiceType _constInvoiceType;
		[ForeignKeyAssociation(ConstraintName = "FK_invoices_const_invoice_types_InvoiceTypeID", SharedFields = "InvoiceTypeID", TargetFields = "InvoiceTypeID")]
		[Storage("_constInvoiceType")]
		public virtual ConstInvoiceType ConstInvoiceType
		{
			get
			{
				return this._constInvoiceType;
			}
			set
			{
				if(this._constInvoiceType != value)
				{
					this._constInvoiceType = value;
					this.OnPropertyChanged("ConstInvoiceType");
				}
			}
		}
		
		private Company _company;
		[ForeignKeyAssociation(ConstraintName = "FK_invoices_companies_CompanyID", SharedFields = "CompanyID", TargetFields = "CompanyID")]
		[Storage("_company")]
		public virtual Company Company
		{
			get
			{
				return this._company;
			}
			set
			{
				if(this._company != value)
				{
					this._company = value;
					this.OnPropertyChanged("Company");
				}
			}
		}
		
		private IList<InvoicesDetail> _invoicesDetails = new List<InvoicesDetail>();
		[Collection(InverseProperty = "Invoice")]
		[Storage("_invoicesDetails")]
		public virtual IList<InvoicesDetail> InvoicesDetails
		{
			get
			{
				return this._invoicesDetails;
			}
		}
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
	}
}
#pragma warning restore 1591
